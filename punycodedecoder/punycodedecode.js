// https://github.com/bestiejs/punycode.js/
const maxInt=2147483647,base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,delimiter='-',regexPunycode=/^xn--/,regexNonASCII=/[^\0-\x7E]/,regexSeparators=/[\x2E\u3002\uFF0E\uFF61]/g,errors={overflow:'Overflow: input needs wider integers to process','not-basic':'Illegal input >= 0x80 (not a basic code point)','invalid-input':'Invalid input'},baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode;function error(a){throw new RangeError(errors[a])}function map(a,b){const c=[];for(let d=a.length;d--;)c[d]=b(a[d]);return c}function mapDomain(a,b){const c=a.split('@');let d='';1<c.length&&(d=c[0]+'@',a=c[1]),a=a.replace(regexSeparators,'.');const e=a.split('.'),f=map(e,b).join('.');return d+f}function ucs2decode(a){const b=[];let c=0;for(const d=a.length;c<d;){const e=a.charCodeAt(c++);if(55296<=e&&56319>=e&&c<d){const f=a.charCodeAt(c++);56320==(64512&f)?b.push(((1023&e)<<10)+(1023&f)+65536):(b.push(e),c--)}else b.push(e)}return b}const ucs2encode=a=>String.fromCodePoint(...a),basicToDigit=function(a){return 10>a-48?a-22:26>a-65?a-65:26>a-97?a-97:base},digitToBasic=function(a,b){return a+22+75*(26>a)-((0!=b)<<5)},adapt=function(a,b,c){let d=0;for(a=c?floor(a/damp):a>>1,a+=floor(a/b);a>baseMinusTMin*tMax>>1;d+=base)a=floor(a/baseMinusTMin);return floor(d+(baseMinusTMin+1)*a/(a+skew))},decode=function(a){const b=[],c=a.length;let d=0,e=initialN,f=initialBias,g=a.lastIndexOf(delimiter);0>g&&(g=0);for(let h=0;h<g;++h)128<=a.charCodeAt(h)&&error('not-basic'),b.push(a.charCodeAt(h));for(let l,h=0<g?g+1:0;h<c;){l=d;for(let p=1,r=base;;r+=base){h>=c&&error('invalid-input');const s=basicToDigit(a.charCodeAt(h++));(s>=base||s>floor((maxInt-d)/p))&&error('overflow'),d+=s*p;const u=r<=f?tMin:r>=f+tMax?tMax:r-f;if(s<u)break;const v=base-u;p>floor(maxInt/v)&&error('overflow'),p*=v}const o=b.length+1;f=adapt(d-l,o,0==l),floor(d/o)>maxInt-e&&error('overflow'),e+=floor(d/o),d%=o,b.splice(d++,0,e)}return String.fromCodePoint(...b)},encode=function(a){const b=[];a=ucs2decode(a);let c=a.length,d=initialN,e=0,f=initialBias;for(const l of a)128>l&&b.push(stringFromCharCode(l));let g=b.length,h=g;for(g&&b.push(delimiter);h<c;){let l=maxInt;for(const p of a)p>=d&&p<l&&(l=p);const o=h+1;l-d>floor((maxInt-e)/o)&&error('overflow'),e+=(l-d)*o,d=l;for(const p of a)if(p<d&&++e>maxInt&&error('overflow'),p==d){let r=e;for(let s=base;;s+=base){const u=s<=f?tMin:s>=f+tMax?tMax:s-f;if(r<u)break;const v=r-u,x=base-u;b.push(stringFromCharCode(digitToBasic(u+v%x,0))),r=floor(v/x)}b.push(stringFromCharCode(digitToBasic(r,0))),f=adapt(e,o,h==g),e=0,++h}++e,++d}return b.join('')},toUnicode=function(a){return mapDomain(a,function(b){return regexPunycode.test(b)?decode(b.slice(4).toLowerCase()):b})},toASCII=function(a){return mapDomain(a,function(b){return regexNonASCII.test(b)?'xn--'+encode(b):b})},punycode={version:'2.1.0',ucs2:{decode:ucs2decode,encode:ucs2encode},decode:decode,encode:encode,toASCII:toASCII,toUnicode:toUnicode};

textTool(function(val) {
    return punycode.toUnicode(val);
}, function(err) {
    alert("Error decoding punycode. Make sure the text you entered is valid punycode.");
});
